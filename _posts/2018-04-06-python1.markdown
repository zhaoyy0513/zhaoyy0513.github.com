---
layout:     post
title:      "Python list 常用方法总结"
subtitle:   "Python日常笔记"
date:       2018-04-06
author:     "ZHAOyy"
header-img: "img/post-bg-python-module.jpg"
tags: 
    - python
---

> This document is not completed and will be updated anytime


**一，创建列表**  
只要把逗号分隔的不同的数据项使用方括号（[ ]）括起来即可 下标（角标，索引）从0开始，最后一个元素的下标可以写-1

list  =  ['1'，‘2，‘3’]

list = [] 空列表

**二，添加新的元素**

list.append() 在list 末尾增加一个元素

list.insert（n,'4'） 在指定位置添加元素，如果指定的下标不存在，那么就是在末尾添加

list1.extend(list2) 合并两个list   list2中仍有元素
三，查看列表中的值
print(list)    遍历列表
等价于    for i in list:

                      print i

print(list[n])  使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符
print(list.count(xx)) 查看某个元素在这个列表里的个数，如果改元素不存在，那么返回0
print(list.index(xx))找到这个元素的小标，如果有多个，返回第一个，如果找一个不存在的元素会报错<br/>
四，删除list 中的元素
list.pop() 删最后一个元素
list.pop(n)指定下标，删除指定的元素，如果删除一个不存在的元素会报错
list.remove(xx) 删除list 里面的一个元素，有多个相同的元素，删除第一个 
print(list.pop()) 有返回值
print(list.remove()) 无返回值
del  list[n] 删除指定下标对应的元素 
del list 删除整个列表， list删除后无法访问<br/>
**五，排序和反转**
list.reverse()将列表反转
list.sort()排序，默认升序
list.sort(reverse=True) 降序排列
`注：list 中有字符串，数字时不能排序，排序针对同类型`<br/>
**六，列表操作的函数**
1、len(list)：列表元素个数 
2、max(list)：返回列表元素最大值 
3、min(list)：返回列表元素最小值 
4、list(seq)：将元组转换为列表
5、enumerate 用法（打印元素对应的下标）
同时取下标，元素
结果如下：
**七，list 循环和切片**
`1，循环`
for i in list:
       print i
如果直接for 循环一个list 的时候，那么每次循环的值都是这个list 里面的元素
`2，切片（list 取值的一种方法）`
name[n:m]  切片是不包含后面那个元素的值（顾头不顾尾）
name[:m] 如果切片前面一个值缺省的话，从开头开始取
name[n:] 如果切片后面的值缺省的话，取到末尾
name[:] 如果全部缺省，取全部
name[n:m：s] s：步长  隔多少个元素取一次
步长是正数，从左往右取
步长是负数，从右往左取
注：切片同样适用于字符串，字符串也有下标
**八、列表生成式**
列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。
实例1：要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：list = list(range(1,11))
实例2：生成[1x1, 2x2, 3x3, ..., 10x10]可以用  list = list(x * x for x in range(1,11))
实例3：for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：list = list(x * x for x in range(1,11) if x%2== 0)
实例4：使用两层循环，可以生成全排列：
list = [m + n for m in 'ABC' for n in 'XYZ']
print(list)
输出结果：['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
实例5：for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：
法一：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> for k, v in d.items():
...     print(k, '=', v)
...
y = B
x = A
z = C
法二：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.items()]
['y=B', 'x=A', 'z=C']